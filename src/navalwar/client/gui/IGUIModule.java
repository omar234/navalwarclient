package navalwar.client.gui;

import navalwar.client.network.IClientNetworkModule;

/**
 * This interface must be implemented by GUI module of the client.
 * It provides methods that enable the network module of the client to
 * notify the GUI module of events generated by the server.
 * 
 * @author Alfredo Villalba
 */
public interface IGUIModule {
	
	public static final int NOTIFICATION_RECEIVED_OK 		= 100;
	public static final int ERROR_NOT_REGISTERED_IN_WAR 	= 101;
	public static final int ERROR_ALREADY_MY_TURN			= 102;
	public static final int ERROR_NOT_MY_TURN				= 103;
	public static final int ERROR_NOT_MORE_SPACE_FOR_ARMIES	= 104;
	public static final int ERROR_END_WAR_WHEN_IN_MY_TURN	= 105;

	
	/**
	 * This method is called after  creating a GUI module.
	 * It binds the GUI with a network module so that the GUI
	 * can communicate with the network module (the net module must proceed
	 * in a similar way).
	 * 
	 * @param net the network module
	 */
	public void bindNetModule(IClientNetworkModule net);

	
	/**
	 * This method is called by the network module of the client when
	 * the server wants to inform the client that an army has registered
	 * into the war.
	 * @param armyID the ID of th war
	 * @return NOTIFICATION_RECEIVED_OK or ERROR_NOT_REGISTERED_IN_WAR or ERROR_NOT_MORE_SPACE_FOR_ARMIES
	 */
	public int notifyArmyInWar(int armyID);

	
	/**
	 * This method is called by the network module of the client when
	 * the server wants to inform the client that the war starts.
	 * @return NOTIFICATION_RECEIVED_OK or ERROR_NOT_REGISTERED_IN_WAR
	 */
	public int startWar();
	
	/**
	 * This method is called by the network module of the client when
	 * the server wants to inform the client that its army can shot now.
	 * @return NOTIFICATION_RECEIVED_OK or ERROR_NOT_REGISTERED_IN_WAR or ERROR_ALREADY_MY_TURN
	 */
	public int turnArmy();
	
	/**
	 * This method is called by the network module of the client when
	 * the server wants to inform the client that its army lost its
	 * chance to shot due to a timeout.
	 * @return NOTIFICATION_RECEIVED_OK or ERROR_NOT_REGISTERED_IN_WAR or ERROR_NOT_MY_TURN
	 */
	public int turnArmyTimeout();
	
	/**
	 * This method is called by the network module of the client when
	 * the server wants to inform the client that the war has finished
	 * and the ID of the winner army.
	 * @param winnerArmyID the ID of the winner army
	 * @return NOTIFICATION_RECEIVED_OK or ERROR_NOT_REGISTERED_IN_WAR OR ERROR_END_WAR_WHEN_IN_MY_TURN
	 */
	public int endWar(int winnerArmyID);
	
	/**
	 * This method is called by the network module of the client when
	 * the server wants to inform the client that the war has finished
	 * and the ID of the winner army.
	 * @param targetArmyID
	 * @param row
	 * @param col
	 * @param impact
	 * @return NOTIFICATION_RECEIVED_OK or ERROR_NOT_REGISTERED_IN_WAR
	 */
	public int shotImpact(int targetArmyID, int row, int col, int impact);


	

}
